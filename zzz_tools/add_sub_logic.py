import sys,os
import argparse

def get_args():
  parser = argparse.ArgumentParser()
  parser.add_argument('-f', '--file', required=False, action='store', help='File')
  parser.add_argument('-s', '--string', required=False, action='store', help='String')
  parser.add_argument('-d', '--debug', required=False, action='store', help='Debug')
  my_args = parser.parse_args()
  return my_args

if get_args().debug == "1":
	debug = True
else:
	debug = False

bad_chars = [0,16,17,18,19,20,21,22,23,24,25,32,33,34,35,36,37,38,39,40,41,47,58,59,63,64]

def get_vals(num):
	#### print "NUM: ", num
	### print "NUM: ", num
	if num < 90:
		num += 256
	arr = []
	#### print num
	if debug:
		print num
	if num >= 80 and num < 159:
		esp = 32

	elif num >= 159 and num < 227:
		esp = 50

	elif num >= 227 and num < 257:
		esp = 75

	elif num >= 257 and num < 280:
		esp = 85

	elif num >= 280 and num < 326:
		esp = 100

	elif num >= 326:
		esp = 127


	it_is_ok = False

	while it_is_ok is False:
		rest = num - 2*esp
		arr = [hex(esp), hex(esp), hex(rest)]
		if debug:
			print str(esp),"+",str(esp),"+",rest
		if esp not in bad_chars and rest not in bad_chars:
			it_is_ok = True
		esp += 1


	#print arr
	return arr


def get_shellcode(list_opc):
	two_compl_arr = []
	final_arr = []

	for i in range(0, len(list_opc)):
		dec_val =  int (list_opc[i], 16)
		if i == (len(list_opc)-1):
			dec_cmpl = 255 - dec_val + 1
		else:
			dec_cmpl = 255 - dec_val
		#print "ORIG: ", list_opc[i], " (",dec_val,")\tCMPL: ",hex(dec_cmpl), " (", dec_cmpl, ")"
		two_compl_arr.append(hex(dec_cmpl))
		final_arr.append(get_vals(dec_cmpl))


	acarreo_arr = []
	for i in final_arr:
		sum = 0
		### print i
		for a in i:
			sum += int(a, 16)
		### print "sum = ", sum
		if sum >= 256:
			acarreo_arr.append(True)
		else:
			acarreo_arr.append(False)

	### print acarreo_arr


	for i in range(0, len(final_arr)-1):
		### print final_arr[i][2]
		### print acarreo_arr[i+1]
		if acarreo_arr[i+1] is True:
			final_arr[i][2] = hex(int(final_arr[i][2], 16) - 1)
			### print hex(int(final_arr[i][2], 16) - 1)

	### print final_arr



	if debug:
		print "Inverted array =>     ", list_opc
	#### print "Complement 2 array => ", two_compl_arr

	text0 = "sub eax,"
	text1 = "sub eax,"
	text2 = "sub eax,"

	if debug:
		print final_arr

	for arr in final_arr:
		if len(arr[0]) is 3:
			text0 += "0"+arr[0].replace("0x","")
		else:
			text0 += arr[0].replace("0x","")

		if len(arr[1]) is 3:
			text1 += "0"+arr[1].replace("0x","")
		else:
			text1 += arr[1].replace("0x","")

		if len(arr[2]) is 3:
			text2 += "0"+arr[2].replace("0x","")
		else:
			text2 += arr[2].replace("0x","")


	if debug:
		print
		print "and eax,554e4d4a"
		print "and eax,2a313235"
		print text0
		print text1
		print text2
		print "push eax"
		print

	def print_opcode(type, text):
                opcode0 = text.replace("sub eax,","")
                opcode0 = [opcode0[i] + opcode0[i+1] for i in range(0,len(opcode0),2)][::-1]
                opcode0 = "".join(opcode0)
                if type =="sub":
                        print "2d"+opcode0
                else:
                        print "25"+opcode0

	# eax,554e4d4a
	# and eax,2a313235
	print_opcode("and","554e4d4a")
	print_opcode("and","2a313235")

        print_opcode("sub",text0)
        print_opcode("sub",text1)
        print_opcode("sub",text2)

	print "50"

	for arr in final_arr:
		for el in arr:
			el_dec = int(el.replace("0x",""),16)
			# if el_dec < 30 or el_dec >= 128:
			if el_dec >= 128:
				print "\n\nProblem with ",el


def main():
	args = get_args()
	fname = args.file
	str_  = args.string
	if fname is not None:
		text = open(fname).read().splitlines()[0]
		text = text.split("\\x")
		x = filter(None, text)
		x = [x[i] + x[i+1] + x[i+2] + x[i+3] for i in range(0,len(x),4)]
		x=x[::-1]
		for init_hex in x:
			if debug:
				print init_hex
			list_opc = [init_hex[i:i+2] for i in range(0, len(init_hex), 2)]
			list_opc = list_opc[::-1]
			get_shellcode(list_opc)


	if str_ is not None:
			if debug:
				print str_
			list_opc = [str_[i:i+2] for i in range(0, len(str_), 2)]
			list_opc = list_opc[::-1]
			get_shellcode(list_opc)


main()
